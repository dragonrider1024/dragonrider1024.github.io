<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-06-11T13:32:56-04:00</updated><id>/feed.xml</id><title type="html">[“Wen Xu’s Personal Site”]</title><subtitle>[&quot;A website for Tech and Life&quot;]</subtitle><author><name>Wen Xu</name></author><entry><title type="html">2019高考数学最后一题</title><link href="/2019/06/11/gaokao.html" rel="alternate" type="text/html" title="2019高考数学最后一题" /><published>2019-06-11T00:00:00-04:00</published><updated>2019-06-11T00:00:00-04:00</updated><id>/2019/06/11/gaokao</id><content type="html" xml:base="/2019/06/11/gaokao.html">&lt;p&gt;已知a, b, c为正数，且满足abc=1. 证明：
\begin{align}
\frac{1}{a} + \frac{1}{b} + \frac{1}{c} \le a^2 + b^2 + c^2
\end{align}
和
\begin{align}
(a+b)^3 + (b+c)^3+ (c+d)^3 \ge 24
\end{align}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;证明&lt;/strong&gt;:
如果把abc=1带入第一个要证明的不等式，那么
\begin{align}
a^2+b^2+c^2 \ge bc + ca + ab
\end{align}
两边同时乘以2，右边移到左边得到
\begin{align}
2a^2+2b^2+2c^2-2ab-2bc-2ca \ge 0
\end{align}
不等式左边又可以写成
\begin{align}
a^2-2ab+b^2+b^2-2bc+c^2+c^2-2ca+a^2 = (a-b)^2+(b-c)^2+(c-a)^2
\end{align}
三个完全平方的和大于等于0，原不等式得证。&lt;/p&gt;

&lt;p&gt;现在我们证明第二部分。由第一个不等式得知
\begin{align}
a^2+b^2 \ge \frac{1}{a} + \frac{1}{b} + \frac{1}{c} - c^2 = \frac{1}{a} + \frac{1}{b} + \frac{1}{c} - \frac{c}{ab}
\end{align}
所以
\begin{align}
(a+b)^3 = (a+b)^2(a+b) = (a^2+b^2+2ab)(a+b) \ge (\frac{1}{a}+ \frac{1}{b} + \frac{1}{c} - \frac{c}{ab} + \frac{2}{c})(a+b) = 1 + 1 + \frac{a}{b} + \frac{b}{a} + \frac{3a}{c} + \frac{3b}{c} - \frac{c}{b} - \frac{c}{a}
\end{align}
同理，
\begin{align}
(b+c)^3 \ge 1 + 1 + \frac{b}{c} + \frac{c}{b} + \frac{3b}{a} + \frac{3c}{a} - \frac{a}{b} - \frac{a}{c} \\
(c+a)^3 \ge 1 + 1 + \frac{c}{a} + \frac{a}{c} + \frac{3c}{b} + \frac{3a}{b} - \frac{b}{a} - \frac{b}{c}
\end{align}&lt;/p&gt;

&lt;p&gt;把三个不等式相加，得到
\begin{align}
(a+b)^3+(b+c)^3+(c+a)^3 \ge 6 + 3(\frac{a}{b} + \frac{b}{a}) + 3(\frac{a}{c} + \frac{c}{a}) + 3(\frac{b}{c} + \frac{c}{b})
\end{align}&lt;/p&gt;

&lt;p&gt;由于
\begin{align}
\frac{a}{b} + \frac{b}{a} \ge 2 \sqrt{\frac{a}{b} \cdot \frac{b}{a}} = 2
\end{align}&lt;/p&gt;

&lt;p&gt;所以，
\begin{align}
(a+b)^3+(b+c)^3+(c+d)^3 \ge 6 + 3\cdot2 + 3\cdot2 + 3\cdot2 = 24
\end{align}&lt;/p&gt;

&lt;p&gt;原不等式得证。&lt;/p&gt;</content><author><name>wen</name></author><category term="gaokao" /><summary type="html">已知a, b, c为正数，且满足abc=1. 证明： \begin{align} \frac{1}{a} + \frac{1}{b} + \frac{1}{c} \le a^2 + b^2 + c^2 \end{align} 和 \begin{align} (a+b)^3 + (b+c)^3+ (c+d)^3 \ge 24 \end{align}</summary></entry><entry><title type="html">Ring Polymer Molecular Dynamics Derivation</title><link href="/2019/06/09/rpmd.html" rel="alternate" type="text/html" title="Ring Polymer Molecular Dynamics Derivation" /><published>2019-06-09T00:00:00-04:00</published><updated>2019-06-09T00:00:00-04:00</updated><id>/2019/06/09/rpmd</id><content type="html" xml:base="/2019/06/09/rpmd.html">&lt;p&gt;Schrodinger’s equations states that
\begin{align}
\frac{d}{dt}|\Psi_t \rangle = \frac{-i \cdot \hat H}{\hbar} \cdot |\Psi_t \rangle
\end{align}
A formal solution to the equation is
\begin{align}
|\Psi_t \rangle = e^{\frac{-i \cdot \hat Ht}{\hbar}} \cdot |\Psi_0 \rangle
\end{align}&lt;/p&gt;

&lt;p&gt;Using
\begin{align}
1 = \int{|x_i\rangle \langle x_i| dx_i}
\end{align}
and insert &lt;script type=&quot;math/tex&quot;&gt;\langle x_f|&lt;/script&gt; to the left, we obtain
\begin{align}
\langle x_f| \Psi_t \rangle = \int \langle x_f | e^{\frac{-i \cdot \hat Ht}{\hbar}}  | x_i \rangle \langle x_i | \Psi_0 \rangle dx_i
\end{align}&lt;/p&gt;

&lt;p&gt;Define &lt;script type=&quot;math/tex&quot;&gt;U(x_f, t; x_i, 0) = \langle x_f | e^{\frac{-i \cdot \hat Ht}{\hbar}}  | x_i \rangle&lt;/script&gt;, then we have
\begin{align}
\langle x_f| \Psi_t \rangle = \int U(x_f, t; x_i, 0) \cdot \langle x_i |\Psi_0 \rangle dx_i
\end{align}&lt;/p&gt;

&lt;p&gt;How do we calculate &lt;script type=&quot;math/tex&quot;&gt;U(x_f, t; x_i, 0)&lt;/script&gt;? Feynman came up with the following solution. Let’s descretize the path from &lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;x_f&lt;/script&gt;. We have points along the path, &lt;script type=&quot;math/tex&quot;&gt;x_1, x_2, ..., x_{N - 1}&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;x_0 = x_i , x_N = x_f&lt;/script&gt;. For each point we have
\begin{align}
 1=\int{|x_{1}\rangle \langle x_{1}| dx_{1}} \\
 1=\int{|x_{2}\rangle \langle x_{2}| dx_{2}} \\
….
\end{align}&lt;/p&gt;

&lt;p&gt;We insert all these identity in &lt;script type=&quot;math/tex&quot;&gt;U(x_f, t; x_i, 0)&lt;/script&gt; and obtain
\begin{align}
U(x_f, t; x_i, 0)=\int dx_{N-1} \int dx_{N-2} \int dx_{N-3}…\int dx_1 \langle x_N | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-1} \rangle \cdot \langle x_{N-1} | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-2} \rangle \cdot \langle x_{N-2} | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-3} \rangle \cdot … \cdot \langle x_1 | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{0} \rangle
\end{align}&lt;/p&gt;

&lt;p&gt;To evaluate &lt;script type=&quot;math/tex&quot;&gt;\langle x_N | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-1} \rangle&lt;/script&gt;, we insert the following identity
\begin{align}
1 = \int |p\rangle \langle p | dp \\
1 = \int |p’ \rangle \langle p’ | dp’
\end{align}
So,
\begin{align}
\langle x_N | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-1} \rangle = \int dp \int dp’ \langle x_N | p’ \rangle \langle p’ |e^{\frac{-i \cdot \hat Ht}{N\hbar}}|p \rangle \langle p|x_{N-1} \rangle
\end{align}&lt;/p&gt;

&lt;p&gt;For larger enough N, in interval &lt;script type=&quot;math/tex&quot;&gt;[x_{N-1}, x_N]&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;V(x)&lt;/script&gt; can be approximated as &lt;script type=&quot;math/tex&quot;&gt;V(x_{N-1})&lt;/script&gt;, so
\begin{align}
\langle p’ |e^{\frac{-i \cdot \hat Ht}{N\hbar}}|p \rangle = \langle p’ |e^{\frac{-i \cdot t }{N\hbar}(\frac{\hat p^2}{2 \cdot m} + V(x_{N-1}))}|p \rangle = e^{\frac{-i \cdot t }{N\hbar}(\frac{\hat p^2}{2 \cdot m} + V(x_{N-1}))} \cdot \delta (p - p’)
\end{align}&lt;/p&gt;

&lt;p&gt;We also have
\begin{align}
\langle x_N | p’ \rangle = \frac{1}{\sqrt{2 \cdot \pi \hbar}} \cdot e^{\frac{i \cdot p’ \cdot x_N}{\hbar}} \\
\langle p | x_{N-1} \rangle = \frac{1}{\sqrt{2 \cdot \pi \hbar}} \cdot e^{-\frac{i \cdot p \cdot x_{N- 1}}{\hbar}}
\end{align}&lt;/p&gt;

&lt;p&gt;Therefore, we have
\begin{equation}
\langle x_N | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-1} \rangle = \frac{1}{2\pi\hbar}\int dp e^{\frac{-i \cdot t }{N\hbar}(\frac{\hat p^2}{2 \cdot m} + V(x_{N-1}))} \cdot e^{\frac{i}{\hbar} \cdot p \cdot (x_N - x_{N-1})} = \frac{1}{2\pi\hbar} \cdot e^{\frac{-i\Delta t}{\hbar} V(x_{N-1})} \cdot e^{\frac{i\Delta t}{2m\hbar}(\frac{(x_N - x_{N - 1})m}{\Delta t})^2} (\frac{2m\pi\hbar}{i\Delta t})^{1/2} \\
\langle x_N | e^{\frac{-i \cdot \hat Ht}{N\hbar}} | x_{N-1} \rangle = (\frac{m}{2\pi\hbar i \Delta t})^{1/2} \cdot e^{\frac{i \Delta t}{\hbar} \cdot (\frac{1}{2} m (\frac{x_N - x_{N - 1}}{\Delta t})^2 - V(x_{N - 1}))} = (\frac{m}{2\pi\hbar i \Delta t})^{1/2} \cdot e^{\frac{i \Delta t}{\hbar} \cdot L(x_{N - 1})}
\label{eq:pathint}
\tag{1}
\end{equation}
where &lt;script type=&quot;math/tex&quot;&gt;\Delta t = \frac{t}{N}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;L&lt;/script&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Lagrangian_mechanics&quot;&gt;Lagrangian&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we insert the above formula for &lt;script type=&quot;math/tex&quot;&gt;j = 0...N - 1&lt;/script&gt; into the expression of &lt;script type=&quot;math/tex&quot;&gt;U(x_f, t; x_i, 0)&lt;/script&gt; and obtain,
\begin{align}
U(x_f, t; x_i, 0)=\int dx_{N-1} \int dx_{N-2} \int dx_{N-3}…\int dx_1 (\frac{m}{2\pi\hbar i \Delta t})^{N/2} \cdot e^{\frac{i\Delta t}{\hbar}\sum_{j=0}^{N - 1}L(x_{j})} \\
U(x_f, t; x_i, 0)=\int dx_{N-1} \int dx_{N-2} \int dx_{N-3}…\int dx_1 (\frac{m}{2\pi\hbar i \Delta t})^{N/2} \cdot e^{\frac{i}{\hbar} \int_0^t L d \tau}  \\
U(x_f, t; x_i, 0)=\int dx_{N-1} \int dx_{N-2} \int dx_{N-3}…\int dx_1 (\frac{m}{2\pi\hbar i \Delta t})^{N/2} \cdot e^{\frac{i}{\hbar} S(t)}
\end{align}
Where &lt;script type=&quot;math/tex&quot;&gt;S(t)&lt;/script&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Action_(physics)&quot;&gt;Action Integral&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Insert the above expression for &lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; into the expression for &lt;script type=&quot;math/tex&quot;&gt;\langle x_f| \Psi_t \rangle&lt;/script&gt;, we obtain
\begin{align}
\langle x_f| \Psi_t \rangle = \int dx_0 \int dx_1 …\int dx_{N - 1} (\frac{m}{2\pi\hbar i \Delta t})^{N/2} \cdot e^{\frac{i}{\hbar} S(t)} \cdot \langle x_0|\Psi_0 \rangle
\end{align}&lt;/p&gt;

&lt;p&gt;This equation is Exact and it is called Feynman’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Relation_between_Schrödinger%27s_equation_and_the_path_integral_formulation_of_quantum_mechanics&quot;&gt;Path Integral Formulation&lt;/a&gt; of Quantum Mechanics&lt;/p&gt;

&lt;h3 id=&quot;but-why-we-spend-so-much-time-derive-the-path-integral-formulation-how-it-is-related-to-ring-polymer-molecular-dynamics-or-statistical-mechanics&quot;&gt;But why we spend so much time derive the Path Integral Formulation? How it is related to Ring Polymer Molecular Dynamics or Statistical Mechanics?&lt;/h3&gt;

&lt;p&gt;To see the connection with statistic mechanics, we observe that the quantum statistical &lt;a href=&quot;https://en.wikipedia.org/wiki/Partition_function_(statistical_mechanics)&quot;&gt;partition function&lt;/a&gt;
\begin{align}
Q(\beta) = Tr(e^{-\beta \hat H})
\end{align}
where &lt;script type=&quot;math/tex&quot;&gt;\beta = \frac{1}{k_B T}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Tr&lt;/script&gt; is the trace of the matrix.
If we expand Q in the basis of coordinate states, we obtain
\begin{align}
Q(\beta) = \int dx \langle x | e^{-\beta \hat H} | x \rangle
\end{align}&lt;/p&gt;

&lt;p&gt;We notice that 
\begin{align}
\rho_{xx} = \langle x | e^{-\beta \hat H} | x \rangle
\end{align}
is very close to
\begin{align}
U(x_f, t; x_i, 0) = \langle x_f | e^{\frac{-i \cdot \hat Ht}{\hbar}}  | x_i \rangle
\end{align}
in the form with &lt;script type=&quot;math/tex&quot;&gt;x_f = x_i&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;t = -i\beta\hbar&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So, doing equilibrium statistical mechanics is equivalent to doing quantum mechanics with imaginary time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we can use Feynman’s Path Integral Formulation to calculate &lt;script type=&quot;math/tex&quot;&gt;\rho_{xx}&lt;/script&gt; too. In order to do that, we just simply replace &lt;script type=&quot;math/tex&quot;&gt;x_f&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;x_0&lt;/script&gt;and t with &lt;script type=&quot;math/tex&quot;&gt;-i\beta\hbar&lt;/script&gt;. Substitue t in Eq. \eqref{eq:pathint}.&lt;/p&gt;

&lt;p&gt;So,
\begin{align}
\langle x_N | e^{\frac{-\beta \cdot \hat H}{N}} | x_{N-1} \rangle = (\frac{m}{2\pi\beta_{N}\hbar^2})^{1/2} \cdot e^{-\beta_N V(x_{N - 1})} \cdot e^{-\frac{\beta_N}{2}m\omega_N^2 \cdot (x_N - x_{N - 1})^2}
\end{align}
Where &lt;script type=&quot;math/tex&quot;&gt;\beta_N = \frac{\beta}{N}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\omega_N = \frac{1}{\beta_N \hbar}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Inserting above equation to &lt;script type=&quot;math/tex&quot;&gt;\rho_{xx}&lt;/script&gt; , we obtain
\begin{align}
\rho_{xx} = \int dx_1 \int dx_2 \int dx_3 … \int dx_{N - 1} (\frac{m}{2\pi\beta_{N}\hbar^2})^{N/2} \cdot e^{-\beta_N \cdot (\sum_0^{N-1} \frac{m}{2} \omega_N^2(x_{j+1} - x_j)^2 + V(x_j))}
\end{align}
where &lt;script type=&quot;math/tex&quot;&gt;x_N = x_0&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Therefore,
\begin{align}
Q(\beta) = \int dx \langle x | e^{-\beta \hat H} | x \rangle = \int dx_0 \int dx_1 … \int dx_{N-1} (\frac{m}{2\pi\beta_{N}\hbar^2})^{N/2} \cdot e^{-\beta_N \cdot (\sum_0^{N-1} \frac{m}{2} \omega_N^2(x_{j+1} - x_j)^2 + V(x_j))}
\end{align}&lt;/p&gt;

&lt;p&gt;Notice for N &lt;strong&gt;distinguishable&lt;/strong&gt; classical bead with interacting potential &lt;script type=&quot;math/tex&quot;&gt;V_{eff} = (\sum_0^{N-1} \frac{m}{2} \omega_N^2(x_{j+1} - x_j)^2 + V(x_j))&lt;/script&gt; (&lt;strong&gt;Only adjacent&lt;/strong&gt; beads are connected through a spring with force constant of &lt;script type=&quot;math/tex&quot;&gt;\omega_N&lt;/script&gt;. Its partition function is
\begin{align}
Q_{classical}(\beta) = (\frac{m}{2\pi\beta\hbar^2})^{N/2} \int dx_0 \int dx_1 … \int dx_{N - 1} e^{-\beta V_{eff}} 
\end{align}&lt;/p&gt;

&lt;p&gt;The form of &lt;script type=&quot;math/tex&quot;&gt;Q_{classical}(\beta)&lt;/script&gt; is almost the same as &lt;script type=&quot;math/tex&quot;&gt;Q(\beta)&lt;/script&gt;, except the temperature. If we evaluate &lt;script type=&quot;math/tex&quot;&gt;Q_{classical}&lt;/script&gt; at a different temperature &lt;script type=&quot;math/tex&quot;&gt;T' = NT&lt;/script&gt;, we would obtain
\begin{align}
Q(\beta) = Q_{classcial}(\beta_N)
\end{align}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In summary, the quantum mechanical partition function &lt;script type=&quot;math/tex&quot;&gt;Q(\beta)&lt;/script&gt; can be obtained by classcial mechanics simulation of N distinguishable beads with effective Hamiltonian as at temperature NT&lt;/strong&gt;
\begin{align}
H_{eff} = \sum_0^{N - 1} (\frac{p_j^2}{2m} + \frac{m}{2} \omega_N^2(x_{j+1} - x_j)^2 + V(x_j))
\end{align}
Where &lt;script type=&quot;math/tex&quot;&gt;x_N = x_0&lt;/script&gt;.&lt;/p&gt;</content><author><name>wen</name></author><category term="physics" /><category term="derivation" /><summary type="html">Schrodinger’s equations states that \begin{align} \frac{d}{dt}|\Psi_t \rangle = \frac{-i \cdot \hat H}{\hbar} \cdot |\Psi_t \rangle \end{align} A formal solution to the equation is \begin{align} |\Psi_t \rangle = e^{\frac{-i \cdot \hat Ht}{\hbar}} \cdot |\Psi_0 \rangle \end{align}</summary></entry><entry><title type="html">Liouville’s Theorem derivation</title><link href="/2019/06/08/liouville.html" rel="alternate" type="text/html" title="Liouville's Theorem derivation" /><published>2019-06-08T00:00:00-04:00</published><updated>2019-06-08T00:00:00-04:00</updated><id>/2019/06/08/liouville</id><content type="html" xml:base="/2019/06/08/liouville.html">&lt;p&gt;In classical mechanics the liouville’s theorem states that the intgeral element
\begin{align}
\partial p_0 \partial q_0 = \partial p_t \partial q_t
\end{align}
where &lt;script type=&quot;math/tex&quot;&gt;p_0, q_0&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;p_t, q_t&lt;/script&gt;are the generalized coordinates at time 0 and t, respectively.&lt;/p&gt;

&lt;p&gt;To prove this, we notice the Hamiltonian equation
\begin{align}
\dot p_0 = -\frac{\partial H}{\partial q_0},
\dot q_0 = \frac{\partial H}{\partial p_0}
\end{align}
and
\begin{align}
\dot p_t = -\frac{\partial H}{\partial q_t},
\dot q_t = \frac{\partial H}{\partial p_t}
\end{align}&lt;/p&gt;

&lt;p&gt;Since &lt;script type=&quot;math/tex&quot;&gt;q_t=q_t(p_0,q_0)&lt;/script&gt; is a function of &lt;script type=&quot;math/tex&quot;&gt;p_0&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;q_0&lt;/script&gt;, we can write
\begin{align}
\dot q_t = \frac {\partial q_t}{\partial p_0} \cdot \dot p_0 + \frac{\partial q_t}{\partial q_0} \cdot  \dot q_0 = \frac{\partial q_t}{\partial p_0} \cdot (-\frac{\partial H}{\partial q_0}) + \frac{\partial q_t}{\partial q_0} \cdot \frac{\partial H}{\partial p_0} = -\frac{\partial q_t}{\partial p_0} \cdot \frac{\partial p_t}{\partial q_0} \cdot \frac{\partial H}{\partial p_t} + \frac{\partial q_t}{\partial q_0} \cdot \frac{\partial p_t}{\partial p_0} \cdot \frac{\partial H}{\partial p_t}
\end{align}&lt;/p&gt;

&lt;p&gt;Combing this equation with the Hamiltonian equation for &lt;script type=&quot;math/tex&quot;&gt;\dot q_t&lt;/script&gt;, we obtained
\begin{align}
\frac{\partial q_t}{\partial q_0} \cdot \frac{\partial p_t}{\partial p_0} - \frac{\partial q_t}{\partial p_0} \cdot \frac{\partial p_t}{\partial q_0} = 1
\end{align}&lt;/p&gt;

&lt;p&gt;That is
\begin{align}
det (J(q_t, p_t, q_0, p_0)) = det(\frac{\partial (q_t, p_t)}{\partial (q_0, p_0)}) = \begin{vmatrix}
\frac{\partial q_t}{\partial q_0} &amp;amp; \frac{\partial q_t}{\partial p_0}\\ \frac{\partial p_t}{\partial q_0} &amp;amp; \frac{\partial p_t}{\partial p_0}
\end{vmatrix} = 1
\end{align}
Where J is the Jacobian matrix.
So,
\begin{align}
\partial p_t \partial q_t = det\lvert J \rvert \cdot\partial p_0 \partial q_0 = \partial p_0 \partial q_0
\end{align}&lt;/p&gt;

&lt;p&gt;Q.E.D&lt;/p&gt;</content><author><name>wen</name></author><category term="physics" /><category term="derivation" /><summary type="html">In classical mechanics the liouville’s theorem states that the intgeral element \begin{align} \partial p_0 \partial q_0 = \partial p_t \partial q_t \end{align} where and are the generalized coordinates at time 0 and t, respectively.</summary></entry><entry><title type="html">Gas Station</title><link href="/2019/06/08/lc134.html" rel="alternate" type="text/html" title="Gas Station" /><published>2019-06-08T00:00:00-04:00</published><updated>2019-06-08T00:00:00-04:00</updated><id>/2019/06/08/lc134</id><content type="html" xml:base="/2019/06/08/lc134.html">&lt;p&gt;There are N gas stations along a circular route, where the amount of gas at station i is gas[i].&lt;/p&gt;

&lt;p&gt;You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.&lt;/p&gt;

&lt;p&gt;Return the starting gas station’s index if you can travel around the circuit once in the clockwise direction, otherwise return -1.&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;If there exists a solution, it is guaranteed to be unique.
Both input arrays are non-empty and have the same length.
Each element in the input arrays is a non-negative integer.
Example 1:&lt;/p&gt;

&lt;p&gt;Input: 
gas  = [1,2,3,4,5]
cost = [3,4,5,1,2]&lt;/p&gt;

&lt;p&gt;Output: 3&lt;/p&gt;

&lt;p&gt;Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:&lt;/p&gt;

&lt;p&gt;Input: 
gas  = [2,3,4]
cost = [3,4,3]&lt;/p&gt;

&lt;p&gt;Output: -1&lt;/p&gt;

&lt;p&gt;Explanation:
You can’t start at station 0 or 1, as there is not enough gas to travel to the next station.
Let’s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can’t travel around the circuit once no matter where you start.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Notice if we start from index i we have gas[i] - cost[i]. If gas[i] - cost[i] &amp;lt; 0, we would immediately stop and move to the next position&lt;/li&gt;
  &lt;li&gt;If gas[i] - cost[i] &amp;gt; 0, we travel to i + 1, gas[i] - cost[i] + gas[i + 1] - cost[i + 1]&lt;/li&gt;
  &lt;li&gt;If at index j we have gas[i] - cost[i] + gas[i + 1] - cost[i + 1] … + gas[j] - cost[j] &amp;lt; 0. We stop. Could we start from index i + 1? The answer is no, since gas[i] - cost[i] &amp;gt;= 0, that would mean gas[i+1] - cost[i+1] +…+gas[j] - cost[j] &amp;lt; 0. Same is true for position i + 2,…, j. So we can safetly skip positions i + 1, …, j and start from position j + 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is my python implementation&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canCompleteCircuit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#we failed at position j
&lt;/span&gt;                
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#no break, we finished a cycle
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>wen</name></author><category term="leetcode" /><category term="algorithm" /><category term="greedy" /><summary type="html">There are N gas stations along a circular route, where the amount of gas at station i is gas[i].</summary></entry><entry><title type="html">Tutorial on Pressure Dependent Rate Constant Calculation (RRKM)</title><link href="/2019/06/01/rrkm.html" rel="alternate" type="text/html" title="Tutorial on Pressure Dependent Rate Constant Calculation (RRKM)" /><published>2019-06-01T00:00:00-04:00</published><updated>2019-06-01T00:00:00-04:00</updated><id>/2019/06/01/rrkm</id><content type="html" xml:base="/2019/06/01/rrkm.html">&lt;p&gt;Chemistry is made of reactions. One important perspective of chemical reaction is its rate (or how fast it goes). The rate is typically defined as the number of molecules change in unit time. For a simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Elementary_reaction&quot;&gt;elementary step&lt;/a&gt;, the rate can be expressed as product of a rate constant and reactants concentrations.&lt;/p&gt;

&lt;p&gt;Unimolecular reactions is a type of reaction with A-&amp;gt;B or A-&amp;gt;B + C which single reactant. It’s rate constant is found to be (external) pressure dependent. Because for A to surpass the energy barrier to form B (or C), it needs to be activated first. It can be either activated by &lt;strong&gt;photon&lt;/strong&gt;, &lt;strong&gt;chemical reaction&lt;/strong&gt;, or another molecule through thermal &lt;strong&gt;collision&lt;/strong&gt;. For collision with a third molecule M first, that third molecule can be either A, B, C or another buffer gas molecule D.&lt;/p&gt;

&lt;p&gt;RRKM theory is proposed for calculating unimolecular reaction rate constants. A good detailed explanation of RRKM theory can be found &lt;a href=&quot;https://reactionmechanismgenerator.github.io/RMG-Py/theory/pdep/master_equation.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial we will show how to use &lt;a href=&quot;https://kinetics.nist.gov/ChemRate/&quot;&gt;Chemrate&lt;/a&gt; and &lt;a href=&quot;https://gaussian.com&quot;&gt;Gaussian09&lt;/a&gt; to calculate the pressure dependent reaction rate of 
H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt; + NH&lt;sub&gt;3&lt;/sub&gt; -&amp;gt; H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt;-NH&lt;sub&gt;3&lt;/sub&gt;
Since the above equation is bimolecular, we need to calculate its reverse reaction
H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt;-NH&lt;sub&gt;3&lt;/sub&gt; -&amp;gt; H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt; + NH&lt;sub&gt;3&lt;/sub&gt;
Which is unimolecular, and use the Keq = k&lt;sub&gt;f&lt;/sub&gt; / k&lt;sub&gt;b&lt;/sub&gt; to calculate the forward bimolecular reaction rate constant.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First step is to get the energy, vibrational frequencies, and equilibrium geometries of NH&lt;sub&gt;3&lt;/sub&gt; , H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt;, and H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt;-NH&lt;sub&gt;3&lt;/sub&gt;. This can be done in Gaussian09.&lt;/li&gt;
  &lt;li&gt;Second step is to create a database of components in Chemrate. A component has several properties as shown in the following screen shots.                                                                                   &lt;br /&gt;
&lt;img src=&quot;/assets/img/Complex.PNG&quot; alt=&quot;alt complex&quot; class=&quot;half-size-img&quot; /&gt;&lt;img src=&quot;/assets/img/Freq.PNG&quot; alt=&quot;alt Freq&quot; class=&quot;half-size-img&quot; /&gt;
&lt;img src=&quot;/assets/img/Rotation.PNG&quot; alt=&quot;alt rotation&quot; class=&quot;half-size-img&quot; /&gt;&lt;img src=&quot;/assets/img/Collision.PNG&quot; alt=&quot;alt Collsion&quot; class=&quot;half-size-img&quot; /&gt;
&lt;img src=&quot;/assets/img/Thermo.PNG&quot; alt=&quot;alt thermo&quot; class=&quot;half-size-img&quot; /&gt;&lt;img src=&quot;/assets/img/Geom.PNG&quot; alt=&quot;alt Geom&quot; class=&quot;half-size-img&quot; /&gt;
Same thing can be done for NH&lt;sub&gt;3&lt;/sub&gt; and H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt;.&lt;/li&gt;
  &lt;li&gt;Once we have a data base of all the reactant and products. We can proceed to create chemical reaction(s) using these components. Since we know for the acid base combination, there is no reaction barrier, we can select “Without Barrier” and create variational transition state using Chemrate’s own procedure. The reaction and energy diagram is shown below.                                                              &lt;br /&gt;
&lt;img src=&quot;/assets/img/Reaction.PNG&quot; alt=&quot;alt Reaction&quot; class=&quot;half-size-img&quot; /&gt;&lt;img src=&quot;/assets/img/EnergyDiagram.PNG&quot; alt=&quot;alt EnergyDiagram&quot; class=&quot;half-size-img&quot; /&gt;
We can also add chemical or custom activation for the active components. But here we just use collision activations.&lt;/li&gt;
  &lt;li&gt;Once we have the reaction, we can proceed to create tasks for computing the rate constant. The tasks are composed of different levels of pressures and temperatures and the method to solve the RRKM-Master Equation.
&lt;img src=&quot;/assets/img/Tasks.PNG&quot; alt=&quot;alt Task&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Once tasks are created, we can compute all for these tasks. The results for the foward unimolecular and reverse bimolecular reaction rate constants will be calculated, including other useful informations, such as micro-canonical rate costants, density of states, sum of states, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below, I’ve shown the calculate bimolecular recombination rate constants of NH&lt;sub&gt;3&lt;/sub&gt; and H&lt;sub&gt;2&lt;/sub&gt;SO&lt;sub&gt;4&lt;/sub&gt; as a function of external pressure (Argon as Buffer gas). The high pressure limit rate constant just corresponds to the rate constant calculated using traditional &lt;a href=&quot;http://www.acmm.nl/molsim/han/2006/TSTAndQTSTAndTSLectures.pdf&quot;&gt;Transition State Theory (TST)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/RateP.PNG&quot; alt=&quot;alt RateP&quot; /&gt;&lt;/p&gt;</content><author><name>wen</name></author><category term="chemical kinetics" /><category term="RRKM" /><category term="quantum mechanics" /><category term="computational chemistry" /><summary type="html">Chemistry is made of reactions. One important perspective of chemical reaction is its rate (or how fast it goes). The rate is typically defined as the number of molecules change in unit time. For a simple elementary step, the rate can be expressed as product of a rate constant and reactants concentrations.</summary></entry><entry><title type="html">Flip Equivalent Binary Trees (LC951)</title><link href="/2019/05/31/lc951.html" rel="alternate" type="text/html" title="Flip Equivalent Binary Trees (LC951)" /><published>2019-05-31T00:00:00-04:00</published><updated>2019-05-31T00:00:00-04:00</updated><id>/2019/05/31/lc951</id><content type="html" xml:base="/2019/05/31/lc951.html">&lt;h3 id=&quot;problem-description&quot;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.&lt;/p&gt;

&lt;p&gt;A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.&lt;/p&gt;

&lt;p&gt;Write a function that determines whether two binary trees are flip equivalent.  The trees are given by root nodes root1 and root2.&lt;/p&gt;

&lt;p&gt;Example 1:&lt;/p&gt;

&lt;p&gt;Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.
Flipped Trees Diagram&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;Each tree will have at most 100 nodes.
Each value in each tree will be a unique integer in the range [0, 99].&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;It is quite straight forward to use recursion to solve the problem.&lt;/p&gt;

&lt;p&gt;Below is python code&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flipEquiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipEquiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipEquiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipEquiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flipEquiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
				
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>wen</name></author><category term="binary tree" /><category term="recursion" /><summary type="html">Problem description For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.</summary></entry><entry><title type="html">Check Completeness of a Binary Tree (LC958)</title><link href="/2019/05/31/lc958.html" rel="alternate" type="text/html" title="Check Completeness of a Binary Tree (LC958)" /><published>2019-05-31T00:00:00-04:00</published><updated>2019-05-31T00:00:00-04:00</updated><id>/2019/05/31/lc958</id><content type="html" xml:base="/2019/05/31/lc958.html">&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isCompleteTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCompleteTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCompleteTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#subtree is not complete
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#left height is smaller than right height
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#left height is larger than right height plus 1
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#left height equals right height, then left subtree must be full
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#left height equals right height plus 1, then right subtree must be full
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        
        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>wen</name></author><category term="binary tree" /><category term="recursion" /><summary type="html">Solution</summary></entry><entry><title type="html">Complete Binary Tree Inserter</title><link href="/2019/05/30/lc919.html" rel="alternate" type="text/html" title="Complete Binary Tree Inserter" /><published>2019-05-30T00:00:00-04:00</published><updated>2019-05-30T00:00:00-04:00</updated><id>/2019/05/30/lc919</id><content type="html" xml:base="/2019/05/30/lc919.html">&lt;h3 id=&quot;problem-description&quot;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.&lt;/p&gt;

&lt;p&gt;Write a data structure CBTInserter that is initialized with a complete binary tree and supports the following operations:&lt;/p&gt;

&lt;p&gt;CBTInserter(TreeNode root) initializes the data structure on a given tree with head node root;
CBTInserter.insert(int v) will insert a TreeNode into the tree with value node.val = v so that the tree remains complete, and returns the value of the parent of the inserted TreeNode;
CBTInserter.get_root() will return the head node of the tree.&lt;/p&gt;

&lt;p&gt;Example 1:&lt;/p&gt;

&lt;p&gt;Input: inputs = [“CBTInserter”,”insert”,”get_root”], inputs = [[[1]],[2],[]]
Output: [null,1,[1,2]]
Example 2:&lt;/p&gt;

&lt;p&gt;Input: inputs = [“CBTInserter”,”insert”,”insert”,”get_root”], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]
Output: [null,3,4,[1,2,3,4,5,6,7,8]]&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;The initial given tree is complete and contains between 1 and 1000 nodes.
CBTInserter.insert is called at most 10000 times per test case.
Every value of a given or inserted node is between 0 and 5000.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Since the tree is complete binary tree, we can use serialize it to an array. Everytime, we insert we append to the end of the array and find the parent of the inserted node and modify the left and right attribute of the parent node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is python implementation&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CBTInserter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Your CBTInserter object will be instantiated and called as such:
# obj = CBTInserter(root)
# param_1 = obj.insert(v)
# param_2 = obj.get_root()
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>wen</name></author><category term="binary tree" /><category term="depth first search" /><summary type="html">Problem description A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</summary></entry><entry><title type="html">Smallest Subtree with all the Deepest Nodes (LC865)</title><link href="/2019/05/29/lc865.html" rel="alternate" type="text/html" title="Smallest Subtree with all the Deepest Nodes (LC865)" /><published>2019-05-29T00:00:00-04:00</published><updated>2019-05-29T00:00:00-04:00</updated><id>/2019/05/29/lc865</id><content type="html" xml:base="/2019/05/29/lc865.html">&lt;h3 id=&quot;problem-description&quot;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;Given a binary tree rooted at root, the depth of each node is the shortest distance to the root.&lt;/p&gt;

&lt;p&gt;A node is deepest if it has the largest depth possible among any node in the entire tree.&lt;/p&gt;

&lt;p&gt;The subtree of a node is that node, plus the set of all descendants of that node.&lt;/p&gt;

&lt;p&gt;Return the node with the largest depth such that it contains all the deepest nodes in its subtree.&lt;/p&gt;

&lt;p&gt;Example 1:&lt;/p&gt;

&lt;p&gt;Input: [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation:&lt;/p&gt;

&lt;p&gt;We return the node with value 2, colored in yellow in the diagram.
The nodes colored in blue are the deepest nodes of the tree.
The input “[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]” is a serialization of the given tree.
The output “[2, 7, 4]” is a serialization of the subtree rooted at the node with value 2.
Both the input and output have TreeNode type.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;In the first step, we can find the depth of the tree using a dfs.&lt;/li&gt;
  &lt;li&gt;In the second step, we can find the set of nodes that with depth equal the depth of the entire tree.&lt;/li&gt;
  &lt;li&gt;Now the problem is reduced to find the lowest common ancestors of the nodes set in step 2. We can track the parent of the nodes set, until all parents reduced to single node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is my python implementation&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subtreeWithAllDeepest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finddepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TreeNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;finddepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;finddepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;finddepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tempnodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tempnodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tempnodes&lt;/span&gt;
            
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>wen</name></author><category term="leetcode" /><category term="algorithm" /><category term="binary tree" /><category term="depth first search" /><summary type="html">Problem description Given a binary tree rooted at root, the depth of each node is the shortest distance to the root.</summary></entry><entry><title type="html">All Nodes Distance K in Binary Tree (LC863)</title><link href="/2019/05/27/lc863.html" rel="alternate" type="text/html" title="All Nodes Distance K in Binary Tree (LC863)" /><published>2019-05-27T00:00:00-04:00</published><updated>2019-05-27T00:00:00-04:00</updated><id>/2019/05/27/lc863</id><content type="html" xml:base="/2019/05/27/lc863.html">&lt;h3 id=&quot;problem-description&quot;&gt;Problem description&lt;/h3&gt;
&lt;p&gt;We are given a binary tree (with root node root), a target node, and an integer value K.&lt;/p&gt;

&lt;p&gt;Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.&lt;/p&gt;

&lt;p&gt;Example 1:&lt;/p&gt;

&lt;p&gt;Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2&lt;/p&gt;

&lt;p&gt;Output: [7,4,1]&lt;/p&gt;

&lt;p&gt;Explanation: 
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sketch0.png&quot; alt=&quot;alt sketch 0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that the inputs “root” and “target” are actually TreeNodes.
The descriptions of the inputs above are just serializations of these objects.&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;The given tree is non-empty.
Each node in the tree has unique values 0 &amp;lt;= node.val &amp;lt;= 500.
The target node is a node in the tree.
0 &amp;lt;= K &amp;lt;= 1000.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;We can first use DFS to add a parent attr to all the tree nodes.&lt;/li&gt;
  &lt;li&gt;Then we can use a second DFS to find all the nodes that have K distance from target.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is my python implementation&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;distanceK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
        :type root: TreeNode
        :type target: TreeNode
        :type K: int
        :rtype: List[int]
        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#add parent attr to the tree node
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dfs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dfs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;dfs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dfs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
				
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>wen</name></author><category term="leetcode" /><category term="algorithm" /><category term="depth first search" /><category term="binary tree" /><summary type="html">Problem description We are given a binary tree (with root node root), a target node, and an integer value K.</summary></entry></feed>